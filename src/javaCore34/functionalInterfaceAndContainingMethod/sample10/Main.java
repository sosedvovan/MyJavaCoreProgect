package javaCore34.functionalInterfaceAndContainingMethod.sample10;

import java.util.Arrays;

// Вернемся к теме функциональных интерфейсов.
// Область применения функциональных интерфейсов:

public class Main {

    public static void main(String[] args) {

        //создадим массив строк:
        String[] array = new String[] { "hello", "world" };


        //Передаем ссылку на метод как параметр при вызове метода:
        //(те, когда видим оператор :: понимаем, что создается соответствие этого метода с сылкой типа функцион интерфейс)
        changeStringArray(array, String::toUpperCase);

        System.out.println(Arrays.toString(array));

    }


    //нижележащий метод ожидает в своих аргументах массив строк и ссылку типа интерфейс (StringModificationFunction smf = String::toUpperCase)
    //причем при вызове этого метода из main ---changeStringArray(array, String::toUpperCase);----
    //мы в качестве ссылки на интерфейс передали ссылку на метод класса String: -----String::toUpperCase----
    //то мы сделали соответствие ссылки типа интерфейс с ссылкой на метод, реализующий абстракт метод интерфейса:
    //StringModificationFunction smf = String::toUpperCase;

    //Ссылка типа Функциональный интерфейс как параметр метода
    // (через нее обратимся к абстракт методу в теле этого метода и вызовем соотнесенный метод String::toUpperCase):
    public static void changeStringArray(String[] array, StringModificationFunction smf) {
        for (int i = 0; i < array.length; i++) {//по пришедшему в аргументы массиву идем циклом
            array[i] = smf.modification(array[i]);//к каждому элементу массива применяем метод функционального интерфейса,
                                                 //кот соотнесен с методом String::toUpperCase - все буквы заглавные.
        }
    }
}

/**
 *Функциональные интерфейсы помогают реализовать аналог функций высшего
 * порядка применяемых в других языках программирования
 *
 * Функция высшего порядка — в программировании функция, принимающая в качестве
 * аргументов другие функции или возвращающая другую функцию в качестве результата.
 *
 * И хотя в Java подобный механизм пока не поддерживается, но можно реализовать
 * его аналог с помощью функциональных интерфейсов и ссылок на методы. Например,
 * если нужно описать метод как параметр другого метода то нужно в качестве параметра
 * просто передать ссылку на функциональный интерфейс. Если из метода нужно вернуть
 * метод, то можно вернуть ссылку на функциональный интерфейс.
 */