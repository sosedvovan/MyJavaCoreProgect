package javaCore34.functionalInterfaceAndContainingMethod.sample6;

public class Main {

    public static void main(String[] args) {



    NumberGenerator ng = new NumberGenerator();

    //чтобы в классе Main указать, какой именно из трех методов класса NumberGenerator использовать в качестве реализации
    //абстрактного метода- надо параметризовать ссылку типа интерфейс:

    Modifier<Integer> a = ng::add;//Нужно явно указывать тип ссылки на функциональный интерфейс,тогда компилятор поймет,
    //какой именно из трех методов класса NumberGenerator использовать в качестве реализации абстрактного метода
    //функционального интерфейса

    Modifier<String> b = ng::add;//Нужно явно указывать тип ссылки на функциональный интерфейс,тогда компилятор поймет,
    //какой именно из трех методов класса NumberGenerator использовать в качестве реализации абстрактного метода
    //функционального интерфейса

     Modifier<Double> c = ng::add;//тоже для третьего метода.Если не указать <Double> - ошибка компилятора
        //тк произойдет стирание типа до object, а такого метода в классе NumberGenerator нет. и компилятор,
        //вдобавок, просто не поймет, какой из трех методов вызывать, тк подойдут все три метода
        //ЕСЛИ ИНТЕРФЕЙС ОБОБЩЕННЫЙ И ОН ИСПОЛЬЗУЕТ НЕ ОБОБЩЕННЫЕ МЕТОДЫ- НАДО ЯВНО УКАЗЫВАТЬ: <...>

        //теперь выведем в консоль результат работы абстрактного метода функционального интерфейса,
        //который реализуют методы класса  NumberGenerator:
     System.out.println(a.change(5));
     System.out.println(b.change("Hello!!!"));
     System.out.println(c.change(5.5));

}
}