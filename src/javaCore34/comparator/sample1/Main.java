package javaCore34.comparator.sample1;

import java.util.Arrays;
import java.util.Comparator;

public class Main {

    public static void main(String[] args) {

        //Создание массива объектов класса Cat для демонстрации
        Cat cat1 = new Cat("Umka", 12);
        Cat cat2 = new Cat("Luska", 5);
        Cat cat3 = new Cat("Barsic", 8);
        Cat cat4 = new Cat("Timka", 5);
        Cat cat5 = new Cat("Kuzia", 2);
        Cat[] cats = new Cat[]{cat1, cat2, cat3, cat4, cat5};

        //          Где в стандартной библиотеке используется Comparator:
        //Например для сортировки массивов используется метод класса Arrays:
        //static <T> void sort (T[] a, Comparator<? super T> c)
        //С помощью такого метода вы можете выполнить сортировку массива используя
        //реализацию Comparator для объектов этого класса.

        //                  Проверка реализации:
        //создали объект класса-компоратора(см ниже), на этом объекте будем вызывать абстракт интерфейса compare()
        CatAgeComparator comp = new CatAgeComparator();//Реализация Comporator
        //Для приведенной реализации выполним ряд необходимых проверок. Как можно
        //видеть выполняются такие свойства как:
        //● Антисимметричность
        //● Транзитивность
        //● Правило равенства знаков
        //обрати внимание- сравниваем объекты вне массива
        System.out.println(comp.compare(cat1, cat2) == -comp.compare(cat2, cat1));//true
        System.out.println(comp.compare(cat1, cat2) > 0 && comp.compare(cat2, cat5) > 0 && comp.compare(cat1, cat5) > 0);//true
        System.out.println(comp.compare(cat2, cat4) == 0 && (comp.compare(cat2, cat1) < 0 && comp.compare(cat4, cat1) < 0));//true


        //                     Сортировка массива с использованием Comparator
        //В данном примере показано сортировку массива с использованием реализации
        //Comparator. В этом случае элементы массива будут отсортированы по увеличению возраста.
        Arrays.sort(cats, comp);//Сортировка массива с пом Реализации Comporator
        System.out.println(Arrays.toString(cats));


        //        Пример реализации Comparator<Cat> лямбда функцией и ссылкой на метод
        Comparator<Cat> comp1 = (a, b) -> a.getAge() - b.getAge();//Лямбда функция- тоже сравнивает по возрасту котов
        Arrays.sort(cats, comp1);
        System.out.println(Arrays.toString(cats));
        //Подробнее о реализации с помощью лямбда функции:
        //(a, b) -> a.getAge() - b.getAge();    сопоставляется с абстрактом:   public int compare(Cat o1, Cat o2)
        //а - первый сравниваемый кот ожидается в аргументах абстракта
        //b - второй сравниваемый кот ожидается в аргументах абстракта
        //после -> вычисляем разницу в возрасте этих котов и получаем int  - а у абстракта на выходе тоже int

        Comparator<Cat> comp2 = Main::catAgeCompare;//Ссылка на метод(сам метод см ниже)- тоже сравнивает по возрасту котов
        Arrays.sort(cats, comp2);
        System.out.println(Arrays.toString(cats));


        //     Еще один пример реализации Comparator - числа сравниваются и потом сортируются по своему модулю:
        Integer[] array = new Integer[] { 5, 0, -3, 2, -1, 4 };
        Comparator<Integer> comp3 = (a, b) -> Math.abs(a) - Math.abs(b);
        Arrays.sort(array, comp3);
        System.out.println(Arrays.toString(array));

    }//закрыли метод main

    //вторая реализация компоратора(его абстракта) с пом ссылки на этот метод- тоже по возрасту котов
    public static int catAgeCompare(Cat a, Cat b) {
        if (a.getAge() > b.getAge()) {
            return 1;
        }
        if (a.getAge() < b.getAge()) {
            return -1;
        }
        return 0;
    }

}//закрыли класс Main

//Пример реализации Comparator<Cat> в виде класса:
//В данном примере приведена реализация Comparator<Cat> для сравнения двух
//объектов класса Cat по такому критерию, как возраст, а именно кот возраст которого
//меньше считается меньше кота с более высоким возрастом.
class CatAgeComparator implements Comparator<Cat> {
    @Override
    public int compare(Cat o1, Cat o2) {
        if (o1.getAge() > o2.getAge()) {
            return 1;
        }
        if (o1.getAge() < o2.getAge()) {
            return -1;
        }
        return 0;
    }
}

/**
 * Функциональный интерфейс Comparator:
 * <p>
 * Comparator<T> - функциональный интерфейс появившийся в Java 8. Используется
 * для установления отношения полного порядка в множестве объектов в коллекции.
 * Основное предназначение сравнение двух объектов. Это используется для сортировки
 * последовательностей объектов, для поиска минимального и максимального элемента.
 * Для использования стоит импортировать java.util.Comparator
 * <p>
 * Отношение полного порядка
 * Любое бинарное отношение на множестве называется отношением полного порядка
 * если оно обладает следующими характеристиками:
 * Рефлексивность              ∀a∈X : aRa
 * Антисимметричность          ∀a , b∈X :aRb∧bRa⇒a=b
 * Транзитивность              ∀a , b, c∈X : aRb∧bRc⇒aRc
 * ∀a , b∈X :aRb∨bRa
 * ∀Y⊂X ∃a∈Y ∀b∈Y : aRb
 * <p>
 * <p>
 * Отношение полного порядка:
 * На самом деле все гораздо проще чем кажется. В качестве бинарного отношения
 * можно использовать отношение меньше или равно ≤. Для упрощения объяснения примем
 * что a и b целые числа
 * Рефлексивность        ∀a∈ℤ:a⩽a
 * Антисимметричность    ∀a , b∈ℤ: a⩽b∧b⩽a⇒a=b
 * Транзитивность        ∀a , b, c∈ℤ:a⩽b∧b⩽c⇒a⩽c
 * Связанность            ∀a , b∈ℤ: a⩽b∨b⩽a
 * ∀Y⊂ℤ∃a∈Y ∀b∈Y : a⩽b
 * <p>
 * Отношение полного порядка определяет способ сравнения объектов попарно между
 * собой. И это сравнение подчиняется указанным требованиям.
 * <p>
 * <p>
 * Замечания к определению Comparator:
 * Отношения полного порядка задаваемое с помощью Comparator называется
 * согласованным с equals в случае если для двух объектов a и b выполняется условие:
 * из compare(a,b)==0 следует a.equals(b)==true и наоборот
 * Если ваша реализация Comparator не согласованна с equals, то стоит отразить это в
 * документации.
 * Также можно следовать следующим рекомендациям:
 * ● Генерировать NullPointerException — если среди параметров есть null, а ваша
 * реализация не подразумевает этого
 * ● ClassCastException - если типы аргументов не позволяют сравнивать их этим
 * компаратором
 * <p>
 * <p>
 * Абстрактный метод интерфейса Comparator<T>:
 * Метод                                       Описание
 * int compare(T o1, T o2)                  Возвращает положительное число в случае если объект по первой ссылке
 * больше объекта по второй ссылке. Возвращает отрицательное число в случае
 * если объект по второй ссылке больше объекта первого. Возвращает ноль если
 * в случае равенства двух объектов по ссылкам.
 * <p>
 * Абстрактный метод интерфейса Comparator<T>:
 * В качестве абстрактного метода интерфейса Comparator<T> выступает метод int
 * compare(T o1, T o2). Его реализация должна вернуть положительное число (любое) если
 * o1 по выбранному вами критерию больше o2, отрицательное число если o1 меньше o2 и 0
 * в случае их равенства.
 * Желательно что бы для любых параметров (x,y,z) выполнялись такие соотношения:
 * 1) compare(x,y) = - compare(y,x)
 * 2) compare(x, y)>0 && compare(y, z)>0 следует compare(x, z)>0
 * 3) compare(x, y)==0 следует равенство знаков compare(x, z) и compare(y, z) для всех z.
 * 4) Если compare(x, y) генерирует исключение, то и compare(y, x) генерирует такое же
 * исключение.
 */
