package javaCore34.function.sample5;

import java.util.Date;
import java.util.function.DoubleToIntFunction;
import java.util.function.LongFunction;
import java.util.function.ToIntBiFunction;
import java.util.function.ToIntFunction;

//Примитивные специализации Function:
public class Main {
    public static void main(String[] args) {

        //Пример применения Принимающей примитивной специализации (есть только параметр) LongFunction:
        //В примере показано использование LongFunction. На основании примитивного типа
        //long создается новый объект типа java.util.Date.
        LongFunction<Date> fun1 = a -> new Date(a);
        System.out.println(fun1.apply(4_00_000_000_000L));

        //Пример применения Производящей примитивной специализации (есть только выходное значение) ToIntFunction:
        //В примере показано использование ToIntFunction. На основании строки создается значение типа int
        ToIntFunction<String> fun2 = a -> a.hashCode();
        System.out.println(fun2.applyAsInt("Hello"));//получим хешкод этой строки


        //Пример применения Принимающие и производящие примитивные специализации Function : DoubleToIntFunction:
        //В примере показано использование DoubleToIntFunction. На основании значения типа double создается значение типа int:
        DoubleToIntFunction fun3 = Main::convert;
        System.out.println(fun3.applyAsInt(1.99));


        //Пример применения  Принимающие и производящие примитивные специализации Function : ToIntBiFunction:
        //В примере показано использование ToIntBiFunction. На основании объектов типа Character создается значение типа int:
        ToIntBiFunction<Character, Character> fun = (a, b) -> a + b;//получим сумму кодов чаров
        System.out.println(fun.applyAsInt('a', 'b'));

    }

    public static int convert(double num) {
        return (int) num;
    }
}

/**
 * Примитивные специализации Function делятся на несколько групп. Это деление
 * базируется на критерии где именно используется примитивный тип:
 *
 *               Тип                                   Где использует примитивные типы
 * Принимающие примитивные специализации         Использует примитивные типы в качестве параметра
 *
 * Производящие примитивные специализации        Использует примитивные типы в качестве возвращаемого
 *                                               значения
 *
 * Принимающие и производящие примитивные        Использует примитивные типы и в качестве параметра и в
 * специализации                                 качестве возвращаемого значения
 *
 *
 *                     Принимающие примитивные специализации Function:
 *          Принимающие примитивные специализации Function используются в случае
 *          использования примитивных типов в качестве параметра
 *
 *      Название                                              Описание
 * IntFunction<R>                              Использует в качестве параметра тип int и возвращает значение типа R.
 * LongFunction<R> (см пример в коде)          Использует в качестве параметра тип long и возвращает значение типа R.
 * DoubleFunction<R>                           Использует в качестве параметра тип double и возвращает значение типа R.
 *
 * *********************************************************************************************************************
 *
 *                         Производящие примитивные специализации Function:
 *                 Производящие примитивные специализации Function используются в случае
 *                 использования примитивных типов в качестве возвращаемого значения.
 *
 *       Название                                           Описание
 * ToIntFunction<T>  (см пример в коде)        Создает значение типа int на основании объекта по ссылке типа T
 * ToLongFunction<T>                           Создает значение типа long на основании объекта по ссылке типа T
 * ToDoubleFunction<T>                         Создает значение типа double на основании объекта по ссылке типа T
 *
 *                Внимание названия абстрактных методов формируется по принципу:
 *                applyAsТип примитивного значения (тип результата)
 *                Так например в ToIntFunction абстрактный метод называется applyAsInt
 *
 ***********************************************************************************************************************
 *
 *                                 Принимающие и производящие примитивные
 *                                 специализации Function:
 *
 *                  Принимающие и производящие примитивные специализации Function используются в
 *                  случае использования примитивных типов в качестве параметра и возвращаемого значения.
 *
 *        Название                                                       Описание
 * IntToLongFunction                                      Создает значение типа long на основании значения типа int
 * IntToDoubleFunction                                    Создает значение типа double на основании значения типа int
 * LongToDoubleFunction                                   Создает значение типа double на основании значения типа long
 * LongToIntFunction                                      Создает значение типа int на основании значения типа long
 * DoubleToIntFunction  (см пример в коде)                Создает значение типа int на основании значения типа double
 * DoubleToLongFunction                                   Создает значение типа long на основании значения типа double
 *
 *                  Внимание названия абстрактных методов формируется по принципу:
 *                  applyAsТип примитивного значения (тип результата)
 *                  Так например в LongToIntFunction абстрактный метод называется applyAsInt
 *
 * *********************************************************************************************************************
 *
 *                                Примитивные специализации BiFunction:
 *
 *                      Существуют примитивные специализации BiFunction. Они используются для
 *                      генерации на основании объектов значений примитивных типов.
 *
 *       Название                                              Описание
 * ToIntBiFunction<T, U>    (см пример в коде)         На основания объектов типа T и U создается значение типа int
 * ToLongBiFunction<T, U>                              На основания объектов типа T и U создается значение типа long
 * ToDoubleBiFunction<T, U>                            На основания объектов типа T и U создается значение типа double
 *
 *                      Внимание названия абстрактных методов формируется по принципу:
 *                      applyAsТип примитивного значения (тип результата)
 *                      Так например в ToIntBiFunction абстрактный метод называется applyAsInt
 *
 */
